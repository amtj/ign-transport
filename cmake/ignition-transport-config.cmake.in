# - Config file for the @PKG_NAME@ package.
#
# For finding and loading @PKG_NAME@ from your project, type:
#
# find_package(@PROJECT_NAME_LOWER@@PROJECT_MAJOR_VERSION@)
#
# It defines the following variables:
#
#  @PROJECT_NAME_LOWER@@PROJECT_MAJOR_VERSION@_FOUND       - System has @PKG_NAME@.
#  @PKG_NAME@_INCLUDE_DIRS - include directories for @PKG_NAME@ and its dependencies.
#  @PKG_NAME@_LIBRARY_DIRS - Paths in which the linker should search for libraries.
#  @PKG_NAME@_LIBRARIES    - Libraries to link against.
#  @PKG_NAME@_C_FLAGS      - Compiler flags for compiling C sources.
#  @PKG_NAME@_CXX_FLAGS    - Compiler flags for compiling C++ sources.
#  @PKG_NAME@_LDFLAGS      - Linker flags.

include (FindPkgConfig REQUIRED)

if (@PKG_NAME@_CONFIG_INCLUDED)
  return()
endif()
set(@PKG_NAME@_CONFIG_INCLUDED TRUE)

list(APPEND @PKG_NAME@_INCLUDE_DIRS
"@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@/ignition/@IGN_PROJECT_NAME@@PROJECT_MAJOR_VERSION@")

list(APPEND @PKG_NAME@_LIBRARY_DIRS
"@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@")

list(APPEND @PKG_NAME@_CFLAGS
"-I@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@")

# Visual Studio enables c++11 support by default
if (NOT MSVC)
  list(APPEND @PKG_NAME@_CXX_FLAGS -std=c++11)
endif()
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
  set(@PKG_NAME@_CXX_FLAGS "${@PKG_NAME@_CXX_FLAGS} -stdlib=libc++")
endif ()

foreach(lib @PKG_LIBRARIES@)
  set(onelib "${lib}-NOTFOUND")
  find_library(onelib ${lib}
    PATHS @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@
    NO_DEFAULT_PATH
    )
  if(NOT onelib)
    message(FATAL_ERROR "Library '${lib}' in package @PKG_NAME@ is not installed properly")
  endif()
  list(APPEND @PKG_NAME@_LIBRARIES ${onelib})
endforeach()

foreach(dep @PKG_DEPENDS@)
  if(NOT ${dep}_FOUND)
    if (${dep} MATCHES "ZeroMQ")
      include (@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@/cmake/@PROJECT_NAME_LOWER@@PROJECT_MAJOR_VERSION@/FindZeroMQ.cmake)
    elseif(${dep} MATCHES "cppzmq")
      find_path(cppzmq_INCLUDE_DIRS
          zmq.hpp
          PATHS
          ${zmq_INCLUDE_DIRS}
          ${CPPZMQ_HEADER_PATH})
    elseif(${dep} MATCHES "uuid")
      if (UNIX)
        pkg_check_modules(uuid uuid)
      endif()
    else()
      find_package(${dep} REQUIRED)
    endif()
  endif()

  # Protobuf needs to be capitalized to match PROTOBUF_LIBRARIES
  if (${dep} STREQUAL "Protobuf")
    string (TOUPPER ${dep} dep_lib)
  else()
    set (dep_lib ${dep})
  endif()

  list(APPEND @PKG_NAME@_INCLUDE_DIRS ${${dep_lib}_INCLUDE_DIRS})

  list(APPEND @PKG_NAME@_LIBRARIES ${${dep_lib}_LIBRARIES})

  list(APPEND @PKG_NAME@_LIBRARY_DIRS ${${dep_lib}_LIBRARY_DIRS})
endforeach()

if (MSVC)
  list(APPEND @PKG_NAME@_LIBRARIES Ws2_32.lib Iphlpapi.lib)
endif()

list(APPEND @PKG_NAME@_LDFLAGS -L@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@)
